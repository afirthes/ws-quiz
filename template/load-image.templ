package template

templ LoadImageMain() {
	<!DOCTYPE html>
	<html lang="ru">
		<head>
			<link rel="icon" href="data:,"/>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Загрузка фото — Аскан</title>
			<script src="/static/tailwind.js"></script>
			<style>
            @font-face {
            	font-family: 'Hauora';
            	src: url('/static/Hauora-Medium.ttf') format('truetype');
            	font-weight: normal;
            	font-style: normal;
            }

            body {
            	font-family: 'Hauora', sans-serif;
                letter-spacing: 0.01em;
            }
            </style>
		</head>
		<body class="bg-[#121212] text-white font-sans min-h-screen">
			<div class="min-h-screen flex flex-col lg:flex-row">
            <!-- Sidebar -->
            <aside class="bg-[#181818] w-full lg:w-64 p-5 flex flex-col justify-between lg:fixed lg:h-[calc(100vh-2rem)] m-0 lg:m-4 rounded-none lg:rounded-2xl lg:shadow-xl z-20">
                <div class="flex flex-col gap-6">
                    <div class="flex justify-center">
                        <a href="http://localhost:8080/">
                            <img src="/static/logo.png" alt="Аскан" class="w-28 h-auto"/>
                        </a>
                    </div>
                    <nav class="space-y-4 text-sm text-white">
                        <ul class="space-y-2">
                            <li>
                                <a class="flex items-center gap-3 hover:text-gray-300" href="#">
                                    <img src="/static/Scanner.svg" alt="scan" class="w-4 h-4"/>
                                    <span>Новое сканирование</span>
                                </a>
                            </li>
                            <li>
                                <a class="flex items-center gap-3 hover:text-gray-300" href="#">
                                    <img src="/static/Search.svg" alt="vin" class="w-4 h-4"/>
                                    <span>Проверить VIN</span>
                                </a>
                            </li>
                            <li>
                                <a class="flex items-center gap-3 hover:text-gray-300" href="#">
                                    <img src="/static/Image.png" alt="library" class="w-4 h-4"/>
                                    <span>Библиотека</span>
                                </a>
                            </li>
                            <li>
                                <a class="flex items-center gap-3 hover:text-gray-300" href="#">
                                    <img src="/static/Document 2.svg" alt="reports" class="w-4 h-4"/>
                                    <span>Отчёты</span>
                                </a>
                            </li>
                        </ul>
                        <div>
                            <p class="text-gray-400 mb-2">Мои сканирования</p>
                            <ul class="space-y-1 pl-2">
                                <li class="text-white bg-zinc-700 px-3 py-1 rounded-xl font-medium truncate">Кузовные повреждения: сильная...</li>
                                <li class="text-gray-400 truncate">Битое правое крыло переднего б...</li>
                                <li class="text-gray-400 truncate">Трещина по периметру лобового...</li>
                                <li class="text-gray-400 truncate">Вмятина и царапины на правом з...</li>
                                <li class="text-gray-400 truncate">Левое зеркало сломано, царапин...</li>
                            </ul>
                        </div>
                        <div>
                            <p class="text-gray-400 mt-4 mb-2">Старые</p>
                            <ul class="space-y-1 pl-2">
                                <li class="text-gray-400 truncate">Вмятина на крыше, деформация...</li>
                                <li class="text-gray-400 truncate">Повреждён левый порог, перекос...</li>
                                <li class="text-gray-400 truncate">Разбит задний фонарь, вмятина н...</li>
                                <li class="text-gray-400 truncate">Трещина в передней фаре, сколы...</li>
                            </ul>
                        </div>
                    </nav>
                </div>
                <button class="bg-zinc-800 text-white text-sm mt-6 px-4 py-2 rounded-xl hover:bg-zinc-700">
                    Вернуться в Авито
                </button>
            </aside>
				<main class="flex-1 px-4 py-8 flex items-center justify-center lg:ml-[288px]">
					<!-- Простой dropzone -->
					<div id="simple-dropzone" class="border-dashed border-2 border-zinc-600 rounded-2xl p-8 text-center cursor-pointer transition hover:bg-zinc-800 max-w-md w-full hidden">
						<svg xmlns="http://www.w3.org/2000/svg" class="w-10 h-10 mx-auto text-white mb-4" viewBox="0 0 24 24" fill="currentColor">
							<path d="M12 2a5 5 0 0 0-5 5v2H5a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-9a2 2 0 0 0-2-2h-2V7a5 5 0 0 0-5-5z"></path>
						</svg>
						<h2 class="text-white font-semibold text-lg">Загрузите фото</h2>
						<p class="text-gray-400 text-sm mt-2">Перетащите изображения сюда</p>
					</div>
					<!-- Расширенный блок -->
					<div id="rich-dropzone" class="bg-[#181818] rounded-2xl p-8 text-center max-w-md w-full shadow-lg hidden">
						<h2 class="text-xl font-semibold mb-2">Загрузите фото</h2>
						<p class="text-sm text-gray-400 mb-6">
							Прикрепите минимум 4 фотографии транспортного средства, сделанных с разных сторон. Фото должны быть чёткими и без посторонних предметов
						</p>
						<div class="border-2 border-dashed border-zinc-600 rounded-xl p-6 text-center mb-4">
							<p id="upload-count" class="font-semibold text-white mb-1">Загружено: 0</p>
							<p class="text-xs text-gray-400">Минимум 4 фотографии. Максимум 10mb</p>
						</div>
						<div id="previews" class="flex justify-center gap-2 mb-6 flex-wrap">
							<!-- Превью будут вставлены сюда -->
						</div>
						<div class="flex gap-4 justify-center">
							<button id="scan-button" class="flex items-center gap-2 px-5 py-2 rounded-xl bg-blue-600 text-white hover:bg-blue-500">
								<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
									<path d="M9 2a1 1 0 0 0-1 1v2h2V3a1 1 0 0 0-1-1zm6 0a1 1 0 0 0-1 1v2h2V3a1 1 0 0 0-1-1zM5 6a2 2 0 0 0-2 2v2h18V8a2 2 0 0 0-2-2H5zm-2 4v8a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-8H3z"></path>
								</svg>
								Сканировать
							</button>
							<button id="reset-button" class="px-5 py-2 rounded-xl bg-zinc-700 text-white hover:bg-zinc-600">
								Сбросить
							</button>
						</div>
					</div>
				</main>
				<!-- Блок со спиннером -->
				<div id="scan-spinner-wrapper" class="hidden fixed top-0 right-0 bottom-0 left-[288px] bg-black bg-opacity-70 z-30 flex items-center justify-center">
					<div id="scan-spinner" class="bg-[#181818] rounded-2xl p-8 text-center w-full max-w-sm shadow-lg">
						<div class="flex items-center justify-center mb-6">
							<div class="w-10 h-10 relative">
								<div class="absolute w-full h-full rounded-full border-4 border-t-white border-b-transparent border-l-transparent border-r-transparent animate-spin"></div>
							</div>
						</div>
						<h2 class="text-xl font-semibold mb-2">Сканирование</h2>
						<p class="text-sm text-gray-400 mb-6">
							Система распознает загруженные фотографии
						</p>
						<button id="cancel-scan" class="w-full bg-zinc-800 text-white text-sm px-4 py-3 rounded-xl hover:bg-zinc-700 transition">
							Отменить
						</button>
					</div>
				</div>
			</div>
			<script>
document.addEventListener("DOMContentLoaded", async () => {
    let claimId;

    try {
        const response = await fetch("http://localhost:8080/claims", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ details: {} })
        });

        if (!response.ok) throw new Error("Ошибка создания заявки");

        const data = await response.json();
        claimId = data.id;
        console.log("Создана новая заявка, ID:", claimId);
    } catch (err) {
        console.error("Ошибка при создании заявки:", err);
        return;
    }

    const simpleDropzone = document.getElementById("simple-dropzone");
    const richDropzone = document.getElementById("rich-dropzone");
    const previewContainer = document.getElementById("previews");
    const uploadCount = document.getElementById("upload-count");
    const spinner = document.getElementById("scan-spinner-wrapper");
    const scanButton = document.getElementById("scan-button");
    const resetButton = document.getElementById("reset-button");
    const cancelScan = document.getElementById("cancel-scan");

    async function fetchImagesAndUpdateUI() {
        try {
            const imagesResponse = await fetch(`http://localhost:8080/claims/${claimId}/images`);
            if (!imagesResponse.ok) {
                console.error("Ошибка при получении изображений");
                return;
            }

            const images = await imagesResponse.json();
            if (!Array.isArray(images)) {
                console.error("Неверный формат ответа (ожидался массив):", images);
                return;
            }

            if (images.length > 0) {
                simpleDropzone.classList.add("hidden");
                richDropzone.classList.remove("hidden");
                spinner.classList.add("hidden");

                previewContainer.innerHTML = "";
                uploadCount.textContent = `Загружено: ${images.length}`;

                images.forEach((img, index) => {
                    const el = document.createElement("img");
                    el.src = `http://localhost:8080/static/uploads/${img.filename}`;
                    el.alt = `Preview ${index + 1}`;
                    el.className = "w-16 h-16 object-cover rounded-xl border border-zinc-700";
                    previewContainer.appendChild(el);
                });
            } else {
                richDropzone.classList.add("hidden");
                simpleDropzone.classList.remove("hidden");
                spinner.classList.add("hidden");
            }
        } catch (err) {
            console.error("Ошибка при получении изображений:", err);
        }
    }

    function setupDropzone(dropzone) {
        dropzone.addEventListener("dragover", (e) => {
            e.preventDefault();
            dropzone.classList.add("bg-zinc-800");
        });

        dropzone.addEventListener("dragleave", () => {
            dropzone.classList.remove("bg-zinc-800");
        });

        dropzone.addEventListener("drop", async (e) => {
            e.preventDefault();
            dropzone.classList.remove("bg-zinc-800");

            const files = [...e.dataTransfer.files];
            const formData = new FormData();
            files.forEach(file => formData.append("photos", file));

            try {
                const response = await fetch(`http://localhost:8080/upload?claim_id=${claimId}`, {
                    method: "POST",
                    body: formData
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    alert("Ошибка загрузки: " + errorText);
                    return;
                }

                console.log("Файлы успешно загружены");
                await fetchImagesAndUpdateUI();
            } catch (err) {
                alert("Ошибка загрузки: " + err.message);
            }
        });
    }

    // Инициализация
    await fetchImagesAndUpdateUI();
    setupDropzone(simpleDropzone);
    setupDropzone(richDropzone);

    resetButton.addEventListener("click", async () => {
        try {
            const response = await fetch(`http://localhost:8080/claims/${claimId}/images`, {
                method: "DELETE"
            });

            if (!response.ok) {
                alert("Ошибка при удалении изображений");
                return;
            }

            console.log("Все изображения удалены");

            previewContainer.innerHTML = "";
            uploadCount.textContent = "Загружено: 0";
            richDropzone.classList.add("hidden");
            simpleDropzone.classList.remove("hidden");
            spinner.classList.add("hidden");
        } catch (err) {
            alert("Ошибка при удалении изображений: " + err.message);
        }
    });

    scanButton.addEventListener("click", async () => {
        richDropzone.classList.add("hidden");
        simpleDropzone.classList.add("hidden");
        spinner.classList.remove("hidden");

        try {
            // 1. Получаем список файлов по claimId
            const imagesResponse = await fetch(`http://localhost:8080/claims/${claimId}/images`);
            if (!imagesResponse.ok) {
                throw new Error("Ошибка при получении файлов");
            }

            const images = await imagesResponse.json();
            if (!Array.isArray(images) || images.length === 0) {
                throw new Error("Нет файлов для сканирования");
            }

            const fileNames = images.map(img => img.filename);

            // 2. Отправляем POST с { "files": [...] }

            console.log("Отправляем post")
            const response = await fetch(`http://localhost:8080/claims/${claimId}/process`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ files: fileNames })
            });

            if (!response.ok) {
                alert("Ошибка при сканировании");
                //location.reload();
                return;
            }

            // ✅ Редирект после завершения
            window.location.href = `http://localhost:8080/c/${claimId}`;


            console.log("Сканирование завершено");

        } catch (err) {
            alert("Ошибка: " + err.message);
        }
    });

    cancelScan.addEventListener("click", () => {
        spinner.classList.add("hidden");
        richDropzone.classList.remove("hidden");
    });
});
</script>
		</body>
	</html>
}
