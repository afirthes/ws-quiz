package template

templ UsersList() {
	<div class="bg-white p-5 rounded-lg shadow w-full md:w-1/2 flex flex-col justify-between">
		<div>
			<h2 class="text-xl font-semibold text-gray-800 mb-4">–£—á–∞—Å—Ç–Ω–∏–∫–∏</h2>
			<!-- üîΩ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫—É–¥–∞ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å -->
			<div id="users-list" class="flex flex-wrap gap-4 mb-6">
				<!-- –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å—é–¥–∞ -->
			</div>
		</div>
		<div class="flex justify-between gap-4 flex-wrap">
			<button id="start-quiz-button" class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded text-base w-full">–û—Ç–æ—Å–ª–∞—Ç—å –≤–æ–ø—Ä–æ—Å</button>
			<button id="stop-quiz-button" class="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded text-base w-full">–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É</button>
			<button id="finish-question-button" class="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-3 rounded text-base w-full">–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å</button>
		</div>
	</div>

<script>
	if (!window.__userListListenerRegistered) {
		registerWebSocketListener(function (data) {
		    if (data.action === "QUESTION_FINISHED_BROADCAST") {
            	console.log("–ó–∞–≤–µ—Ä—à—ë–Ω –≤–æ–ø—Ä–æ—Å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤");

            	if (!Array.isArray(data.scores)) return;

            	data.scores.forEach(scoreObj => {
            		const userEl = document.getElementById("user-" + scoreObj.user_id);
            		if (!userEl) return;

            		const spans = userEl.getElementsByTagName("span");
            		for (let span of spans) {
            			if (span.textContent.startsWith("–û—á–∫–∏:")) {
            				span.textContent = `–û—á–∫–∏: ${scoreObj.score}`;
            				break;
            			}
            		}
            	});
            }
			if (data.action === "ENTERED_QUIZ_BROADCAST") {
				console.log("User joined:", data.user_name);

				const container = document.getElementById("users-list");
				if (!container) return;

				if (document.getElementById("user-" + data.user_id)) return;

				const wrapper = document.createElement("div");
				wrapper.className = "flex items-center space-x-4 border border-gray-300 rounded px-4 py-3";
				wrapper.id = "user-" + data.user_id;

				const avatar = document.createElement("img");
				avatar.src = `https://robohash.org/${encodeURIComponent(data.user_id)}?set=set3`;
				avatar.alt = "user";
				avatar.className = "w-14 h-14 rounded-full";

				const info = document.createElement("div");
				info.innerHTML = `
					<span class="text-gray-700 text-lg">${data.user_name}</span><br/>
					<span class="text-sm text-gray-500">–û—á–∫–∏: 0</span>
				`;

				wrapper.appendChild(avatar);
				wrapper.appendChild(info);
				container.appendChild(wrapper);
			}
		});

		window.__userListListenerRegistered = true;
	}

	document.addEventListener("DOMContentLoaded", function () {
		const startQuizButton = document.getElementById("start-quiz-button");
		const stopQuizButton = document.getElementById("stop-quiz-button");
		const finishQuestionButton = document.getElementById("finish-question-button");

		stopQuizButton.addEventListener("click", function () {
			if (!socket) {
				console.error("–ù–µ—Ç WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
				return;
			}

			if (!window.currentQuiz || !window.currentQuiz.gsession_id) {
				console.error("gsession_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
				return;
			}

			const message = {
				action: "FINISH_QUIZ_SESSION",
				gsession_id: window.currentQuiz.gsession_id,
				user_id: window.currentUser.user_id
			};

			console.log("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:", message);
			socket.send(JSON.stringify(message));
		});

		finishQuestionButton.addEventListener("click", function () {
			if (!socket) {
				console.error("–ù–µ—Ç WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
				return;
			}

			if (!window.currentQuiz || !window.currentQuiz.gsession_id) {
				console.error("gsession_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
				return;
			}

			const questions = window.quizzesData?.[0]?.questions;
			const lastIndex = window.currentQuestionIndex - 1;

			if (!questions || lastIndex < 0 || !questions[lastIndex]) {
				console.error("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞");
				return;
			}

			let questionId = questions[lastIndex].question_id;

			if (!questionId && window.lastSentQuestionId) {
				questionId = window.lastSentQuestionId;
			}

			if (!questionId) {
				alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å question_id");
				return;
			}

			const message = {
				action: "FINISH_QUESTION",
				gsession_id: window.currentQuiz.gsession_id,
				question_id: questionId
			};

			console.log("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:", message);
			socket.send(JSON.stringify(message));
		});

		if (window.currentQuestionIndex === undefined) {
			window.currentQuestionIndex = 0;
		}

		startQuizButton.addEventListener("click", function () {
			if (!socket) {
				console.error("–ù–µ—Ç WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
				return;
			}
			if (!window.quizzesData || !window.quizzesData[0] || !window.quizzesData[0].questions.length) {
				console.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã");
				return;
			}
			if (!window.currentQuiz || !window.currentQuiz.gsession_id) {
				console.error("gsession_id (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è) –Ω–µ –∑–∞–¥–∞–Ω–∞");
				return;
			}

			const questions = window.quizzesData[0].questions;

			if (window.currentQuestionIndex >= questions.length) {
				alert("–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!");
				return;
			}

			const question = questions[window.currentQuestionIndex];
			const questionId = generate();

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º question_id –≤ –≤–æ–ø—Ä–æ—Å –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
			question.question_id = questionId;
			window.lastSentQuestionId = questionId;

			const message = {
				action: "NEXT_QUESTION",
				gsession_id: window.currentQuiz.gsession_id,
				question_id: questionId,
				question: question.question,
				answers: question.answers,
				correct_answer: question.correct_answer,
				cost: question.cost
			};

			console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞:", message);
			socket.send(JSON.stringify(message));

			window.currentQuestionIndex++;
		});
	});
</script>
}